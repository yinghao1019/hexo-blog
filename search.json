[{"title":"單元測試基本概念","url":"/unit-test-basic/","content":"<p>單元測試的目的在於測試每個class 的function是不是如期運轉,故撰寫目的在於測試在A情境(test case)下的Input&#x2F;Output是不是如預期所想的。透過寫單元測試,也能幫助我們設計程式的撰寫習慣,避免利用一個function 封裝全部的業務邏輯。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"單元測試流程\"><a href=\"#單元測試流程\" class=\"headerlink\" title=\"單元測試流程\"></a>單元測試流程</h2><ol>\n<li>釐清對象</li>\n<li>設計測試案例(Test case)</li>\n<li>測試環境準備(JUnit)</li>\n<li>相依物件隔離(Test Double &amp; Mockito)</li>\n<li>測試結果(JUnit &amp; AssertJ &amp; Mockito)</li>\n<li>測試案例管理(JUnit &amp; JaCoCo)</li>\n</ol>\n<h2 id=\"釐清對象與設計測試案例\"><a href=\"#釐清對象與設計測試案例\" class=\"headerlink\" title=\"釐清對象與設計測試案例\"></a>釐清對象與設計測試案例</h2><p>首先, 撰寫單元測試前 , 需先釐清SUT , DOC 的名詞概念意義 :</p>\n<ul>\n<li>System under test (SUT)  : 要進行功能測試的元件 (Class)</li>\n<li>Depended On Component (DOC) :  測試物件所需要用到其他功能的元件  (Class)</li>\n</ul>\n<p>因此在概念上, 僅需思考 SUT 的元件是誰, 以及要如何進行測試 , 其餘 SUT 裡面用到的 DOC 元件則是需要將它進行隔絕。 </p>\n<p>這些DOC 元件則會在他們的單元測試中測試,  只要DOC 在自己的單元測試沒問題, 那在SUT裡也不會有問題。</p>\n<p>找出了SUT, 就可以開始根據 SUT 設計相對應的 <strong>測試案例(Test Case)</strong> , 為了確保功能的完整性 , 需設計多個測試案例來測試功能。</p>\n<p><strong>測試案例的準則為, 只要該物件的輸入不同, 結果也是不同的情況,  基本上就能拆分出一個測試案例。</strong></p>\n<p>舉例來說,代測功能中具有處理例外的情況, 此時例外情況通常輸入的值會與正常時不同。因此例外與正常執行的情況皆為不同的<strong>測試案例(Test case)。</strong></p>\n<p>而Test Case的設計大多會 Follow 3A Pattern，如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethodNameReturnWhat</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Arrange    </span></span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">//Act   </span></span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">//Assert</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>測試方法的命名方式為test+測試的方法+預期回傳值。 執行內容為測試內容的準備(Arrange)  &#x2F;執行 (Act)  &#x2F; 驗證 (Assert)。</p>\n<ul>\n<li><p>Arrange : 預先設計測試案例 的輸入資料為何,  包含一些測試替身 等。</p>\n</li>\n<li><p>Act :  如何執行要測試的功能之實作部分</p>\n</li>\n<li><p>Assert: 驗證該方法輸出的資料是否符合預期 or 方始使用DOC 的次數等等</p>\n</li>\n</ul>\n<h2 id=\"測試環境準備-JUnit\"><a href=\"#測試環境準備-JUnit\" class=\"headerlink\" title=\"測試環境準備( JUnit )\"></a>測試環境準備( JUnit )</h2><p>當開始執行測試時, 需要做的事前準備輸出報告 (測試案例成功與否) 與環境 (是否要先準備假資料，或是啟動Web container)，與當結束後是否要進行清理(可能測試寫檔需要刪除測試產生的檔案)，這個環節Java通常都使用JUnit套件輔助撰寫，在後面的系列文會有詳細的JUnit介紹。</p>\n<h2 id=\"相依物件隔離-Test-Double-＆-Mockito\"><a href=\"#相依物件隔離-Test-Double-＆-Mockito\" class=\"headerlink\" title=\"相依物件隔離(Test Double ＆ Mockito)\"></a>相依物件隔離(Test Double ＆ Mockito)</h2><p>為了不讓DOC物件影響SUT測試的結果,故需要使用隔離方法來排除使用的DOC物件。</p>\n<p>通常隔離的概念為Test Double(測試替身),而隔離的DOC因為被使用的功能主要分為兩類:</p>\n<p>Test Double包含了：</p>\n<p>物件: Dummy &amp; Stub</p>\n<p>作出Test Double的方法: Mock &amp; Spy &amp; Fake</p>\n<h3 id=\"•-Dummy-—-取代不在乎細節的物件\"><a href=\"#•-Dummy-—-取代不在乎細節的物件\" class=\"headerlink\" title=\"• Dummy — 取代不在乎細節的物件\"></a>• Dummy — 取代不在乎細節的物件</h3><p>要被測試的方法中,如被測試的方法實作並不會呼叫DOC物件的方法 or 不需要DOC物件的資料來完成時作功能,像是只是簡單地去計算數量,則該DOC物件就為此類別。</p>\n<h3 id=\"•-Stub-—-讓DOC提供SUT想要的Input-Output的物件\"><a href=\"#•-Stub-—-讓DOC提供SUT想要的Input-Output的物件\" class=\"headerlink\" title=\"• Stub — 讓DOC提供SUT想要的Input&#x2F;Output的物件\"></a>• Stub — 讓DOC提供SUT想要的Input&#x2F;Output的物件</h3><p>Stub則是DOC的物件內容會影像到SUT的method執行結果,即為Stub。</p>\n<h3 id=\"•-Mock-—-都是假的\"><a href=\"#•-Mock-—-都是假的\" class=\"headerlink\" title=\"• Mock — 都是假的\"></a>• Mock — 都是假的</h3><p>由於Stub物件會影響我們的測試結果,故利用Mock的方式來模擬DOC物件,故需要設定我們輸入的值以及對應預期測試情境下要輸出的值來進行替換。</p>\n<h3 id=\"•-Spy-—-監控DOC與SUT的互動\"><a href=\"#•-Spy-—-監控DOC與SUT的互動\" class=\"headerlink\" title=\"• Spy — 監控DOC與SUT的互動\"></a>• Spy — 監控DOC與SUT的互動</h3><p>Spy主要功能為用來檢視Mock與DOC之間的交互作用。</p>\n<h3 id=\"•-Fake-—-環境有限制我只好在寫一個\"><a href=\"#•-Fake-—-環境有限制我只好在寫一個\" class=\"headerlink\" title=\"• Fake — 環境有限制我只好在寫一個\"></a>• Fake — 環境有限制我只好在寫一個</h3><p>其實有Mock和SPY方法在單元測試就涵蓋了99%的覆蓋了，而Fake就是真實寫一個簡單的邏輯取代原本得邏輯(Mock和Spy都是直接輸出需要的值Fake則要寫邏輯)，舉例:Database的使用，在單元測試使用H2(In-memory database)，或是在內網開發環境不能使用外網時，SSL憑證檢查工具可以寫一個Fake，改寫成去讀隨機以準備好在Resource的憑證.txt</p>\n<p>其實在Wiki上這五種都是物件，但是若是以物件的角度去看五種Tese Double很可能會在最後三種Mock&#x2F;Spy&#x2F;Fake搞混，因為這三種是可以重疊的，可以對DOC做Mock在做SPY，模擬加上監控，也可以對Fake做Mock只取其中幾個邏輯做模擬，其他方法用簡單的邏輯實踐。</p>\n<h2 id=\"測試結果-JUnit-AssertJ-Mockito\"><a href=\"#測試結果-JUnit-AssertJ-Mockito\" class=\"headerlink\" title=\"測試結果 (JUnit &#x2F; AssertJ &#x2F; Mockito)\"></a>測試結果 (JUnit &#x2F; AssertJ &#x2F; Mockito)</h2><p>當測試環境,案例,Test double的模擬方式都定義好了,需要確認這樣的情境下所執行的結果是不是如同我們的預期,藉此來驗證有效性。</p>\n<p><strong>測試結果通常會聚焦在三點:</strong></p>\n<ol>\n<li>待測目標(SUT)的輸出結果是否符合預期</li>\n<li>相依物件(DOC)是否有符合預期的被呼叫，而呼叫次數是否準確</li>\n<li>整個Test Case是否有涵蓋到完整的SUT?</li>\n</ol>\n<p>前兩點，在Java會透過JUnit &#x2F; AssertJ &#x2F; Mockito 協助完成，而第三點我們就要討論到Unit Test很重要的觀念，覆蓋率。</p>\n<p>覆蓋率就是單元測試執行結束後，SUT有多少行程式碼有執行到，而執行到的程式碼&#x2F;全部程式碼的百分比就是覆蓋率。而覆蓋率也細分了一些種類，這邊只列三個基本的介紹</p>\n<ol>\n<li>Statement coverage — 程式碼每一行覆蓋</li>\n<li>Branch coverage — SUT中的每個if else是不是都有進去過</li>\n<li>Condition coverage — 每個會產生true or false的判斷是不是都有跑到過</li>\n</ol>\n<p>Branch 和 Condition常常會搞混，直接看個範例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b || b &gt; c) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程式碼，if其實只要做到a &gt; b就可以進入，這是Branch coverage，而Condition Coverage則是a &gt; b || b &gt; c的這兩個條件都要跑到過才能算是覆蓋成功。</p>\n<p>最常用的覆蓋率工具(IDEA&#x2F;JaCoCo提供的覆蓋率)其實沒有上面如此複雜，非常單純與直觀：</p>\n<ol>\n<li>Class - 系統裡多少Class被跑到</li>\n<li>Function - Class裡多少Function被跑到</li>\n<li>Line - Function裡多少程式被跑到</li>\n</ol>\n<h2 id=\"測試案例管理-JUnit-JaCoCo\"><a href=\"#測試案例管理-JUnit-JaCoCo\" class=\"headerlink\" title=\"測試案例管理 (JUnit &amp; JaCoCo)\"></a><strong>測試案例管理 (JUnit &amp; JaCoCo)</strong></h2><p>前面講的都是單元測試個體，這個環節討論的是群，當系統內的單元測試個體都跑完後，觀看整個系統的覆蓋率，以及更改功能後要跑哪些相關連的單元測試都包含在此。而良好CI&#x2F;CD流程都是建立在完善的測試案例管理，監測覆蓋率，執行單元測試群體，這裡的實做也會在後面的系列文介紹，會包含如何將單元測試分組(跑一組單元測試裡面的個體都會執行)，與如何使用 JaCoCo 產出覆蓋率報表。</p>\n<h2 id=\"單元測試常用工具介紹\"><a href=\"#單元測試常用工具介紹\" class=\"headerlink\" title=\"單元測試常用工具介紹\"></a><strong>單元測試常用工具介紹</strong></h2><ul>\n<li>JUnit - Java單元測試的基礎，許多操作都是建立在此之上，包含(Unit Test的環境建立與結果檢驗)</li>\n<li>AssertJ - 是好用的結果檢驗工具，功能比JUnit原生的提供的還多</li>\n<li>Mockito - Test Double建立的好夥伴，Mockito讓開發者不用在自己寫Test Double的物件</li>\n<li>JaCoCo - 覆蓋率報告產生工具</li>\n</ul>\n","categories":["測試"],"tags":["unit test"]}]